/// contains translations for Assets
/// always add a new getter here in the abstract class first, then generate/implement the getters in the subclasses
abstract class TranslationsAssets {
  String get address;
  String get addressError;
  String get all;
  String get amount;
  String get amountAvailable;
  String get amountError;
  String get amountLow;
  String get assetsTest;
  String get available;
  String get balance;
  String get bazaar;
  String get block;
  String get communitiesNotFound;
  String get community;
  String get communityChoose;
  String get communityCurrency;
  String get communityNotSelected;
  String get communitySelect;
  String get copy;
  String get crossChain;
  String get currency;
  String get detail;
  String get done;
  String get end;
  String get event;
  String get fail;
  String get fee;
  String get from;
  String get gasToken;
  String get hash;
  String get home;
  String get invite;
  String get issuanceClaimed;
  String get issuancePending;
  String get locked;
  String get make;
  String get nodeConnecting;
  String get nodeFailed;
  String get notifyReceive;
  String get polkascan;
  String get receive;
  String get reserved;
  String get scan;
  String get success;
  String get tip;
  String get tipTip;
  String get to;
  String get transfer;
  String get value;
  String get amountToBeTransferred;
  String get invoiceAmount;
  String get shareInvoice;
  String get pleaseEnterSomeText;
  String get yourBalanceFor;
  String get amountToTransfer;
}

class TranslationsEnAssets implements TranslationsAssets {
  get address => 'Send to Address';
  get addressError => 'Invalid Address';
  get all => 'All';
  get amount => 'Amount';
  get amountAvailable => 'Available amount';
  get amountError => 'Invalid amount';
  get amountLow => 'Insufficient balance';
  get assetsTest => 'Test Tokens';
  get available => 'Available';
  get balance => 'Balance';
  get bazaar => 'Bazaar';
  get block => 'Block';
  get communitiesNotFound => 'no communities found';
  get community => 'Community';
  get communityChoose => 'Please choose a community';
  get communityCurrency => 'Community Currency';
  get communityNotSelected => 'No community selected, hit the icon to select one';
  get communitySelect => 'Select Community';
  get copy => 'Copy';
  get crossChain => 'Cross chain';
  get currency => 'currency';
  get detail => 'Detail';
  get done => 'done';
  get end => 'No More Data';
  get event => 'Event ID';
  get fail => 'Failed';
  get fee => 'Fee';
  get from => 'From';
  get gasToken => 'Gas Token';
  get hash => 'TxHash';
  get home => 'Home';
  get invite => 'Invite someone';
  get issuanceClaimed => 'No pending community income';
  get issuancePending => 'Claim pending community income';
  get locked => 'Locked';
  get make => 'Send amount';
  get nodeConnecting => 'Connecting remote node...';
  get nodeFailed => 'Remote node connection failed';
  get notifyReceive => 'Token Received';
  get polkascan => 'Open in Browser';
  get receive => 'Receive';
  get reserved => 'Reserved';
  get scan => 'Scan';
  get success => 'Success';
  get tip => 'Tip';
  get tipTip => '\nAdding a tip to this Tx, paying\nthe block author for greater priority.\n';
  get to => 'To';
  get transfer => 'Send'; // as Alain requested 2022-01-2
  get value => 'Value';
  get amountToBeTransferred => 'Send amount';
  get invoiceAmount => 'Invoice amount';
  get shareInvoice => 'Share Invoice';
  get pleaseEnterSomeText => 'Please enter some text';
  get yourBalanceFor => 'Your balance for';
  get amountToTransfer => 'amount to send';
}

class TranslationsDeAssets implements TranslationsAssets {
  get address => 'Sende zu Adresse';
  get addressError => 'Ungültige Adresse';
  get all => 'Alle';
  get amount => 'Betrag';
  get amountAvailable => 'Verfügbarer Betrag';
  get amountError => 'Ungültiger Betrag';
  get amountLow => 'Ungenügender Saldo';
  get assetsTest => 'Test Tokens';
  get available => 'Erhältlich';
  get balance => 'Saldo';
  get bazaar => 'Bazaar';
  get block => 'Block';
  get communitiesNotFound => 'Keine Community gefunden';
  get community => 'Community';
  get communityChoose => 'Bitte wähle eine Community';
  get communityCurrency => 'Community Währung';
  get communityNotSelected => 'Keine Community ausgewählt, klicke auf das Icon';
  get communitySelect => 'Wähle eine Community';
  get copy => 'Kopiere';
  get crossChain => 'Cross chain';
  get currency => 'Währung';
  get detail => 'Detail';
  get done => 'Erledigt';
  get end => 'Keine Daten mehr';
  get event => 'Event ID';
  get fail => 'Fehlgeschlagen';
  get fee => 'Gebühr';
  get from => 'Von';
  get gasToken => 'Gas Token';
  get hash => 'TxHash';
  get home => 'Startbildschirm';
  get invite => 'Jemanden einladen';
  get issuanceClaimed => 'Kein ausstehendes Community-Einkommen';
  get issuancePending => 'Ausstehendes Community-Einkommen einfordern';
  get locked => 'Locked';
  get make => 'Transferieren';
  get nodeConnecting => 'Verbinde mit remote node...';
  get nodeFailed => 'Verbindung zur remote node fehlgeschlagen';
  get notifyReceive => 'Token erhalten';
  get polkascan => 'Öffne im Browser';
  get receive => 'Erhalte';
  get reserved => 'Reserviert';
  get scan => 'Scannen';
  get success => 'Erfolgreich';
  get tip => 'Trinkgeld';
  get tipTip => '\nTrinkgeld für diese Tx hinzufügen, bezahle\ndem Block Author für höhere Priorität.\n';
  get to => 'Nach';
  get transfer => 'Transfer';
  get value => 'Wert';
  get amountToBeTransferred => 'Rechnungsbetrag';
  get invoiceAmount => 'Rechnungsbetrag';
  get shareInvoice => 'Teile als Rechnung';
  get pleaseEnterSomeText => 'Bitte geben Sie einen Text ein';
  get yourBalanceFor => 'Ihr Guthaben auf';
  get amountToTransfer => 'Rechnungsbetrag';
}

class TranslationsZhAssets implements TranslationsAssets {
  get address => '收款地址';
  get addressError => '无效地址';
  get all => '全部';
  get amount => '数量';
  get amountAvailable => '可用金额';
  get amountError => '格式错误';
  get amountLow => '余额不足';
  get assetsTest => '测试 Token';
  get available => '可用';
  get balance => '余额';
  get bazaar => '集市';
  get block => '区块';
  get communitiesNotFound => '没有找到社区';
  get community => '币种';
  get communityChoose => '选择币种';
  get communityCurrency => '社区货币';
  get communityNotSelected => '未选择社区，点击图标选择一个';
  get communitySelect => '选择社区';
  get copy => '复制';
  get crossChain => '跨链转账';
  get currency => '货币';
  get detail => '详情';
  get done => '完成';
  get end => '加载完毕';
  get event => '交易ID';
  get fail => '失败';
  get fee => '手续费';
  get from => '付款地址';
  get gasToken => '气体代币';
  get hash => '交易Hash';
  get home => '家';
  get invite => '邀请某人';
  get issuanceClaimed => '没有待处理的社区收入';
  get issuancePending => '申领待处理的社区收入';
  get locked => '锁定';
  get make => '添加转账';
  get nodeConnecting => '正在连接远程节点...';
  get nodeFailed => '远程节点连接失败';
  get notifyReceive => '到账通知';
  get polkascan => '在浏览器中查看';
  get receive => '收款';
  get reserved => '保留';
  get scan => '扫描';
  get success => '成功';
  get tip => '小费';
  get tipTip => '\n为出块人支付额外的费用，\n可以提高交易打包优先级。\n';
  get to => '收款地址';
  get transfer => '转账';
  get value => '金额';
  get amountToBeTransferred => '发票金额';
  get invoiceAmount => '发票金额';
  get shareInvoice => '分享二维码';
  get pleaseEnterSomeText => '请输入一些文字';
  get yourBalanceFor => '你的余额';
  get amountToTransfer => '要转账的金额';
}
